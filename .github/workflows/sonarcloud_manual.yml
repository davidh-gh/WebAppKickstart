# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow helps you trigger a SonarCloud analysis of your code and populates
# GitHub Code Scanning alerts with the vulnerabilities found.
# Free for open source project.

# 1. Login to SonarCloud.io using your GitHub account

# 2. Import your project on SonarCloud
#     * Add your GitHub organization first, then add your repository as a new project.
#     * Please note that many languages are eligible for automatic analysis,
#       which means that the analysis will start automatically without the need to set up GitHub Actions.
#     * This behavior can be changed in Administration > Analysis Method.
#
# 3. Follow the SonarCloud in-product tutorial
#     * a. Copy/paste the Project Key and the Organization Key into the args parameter below
#          (You'll find this information in SonarCloud. Click on "Information" at the bottom left)
#
#     * b. Generate a new token and add it to your Github repository's secrets using the name SONAR_TOKEN
#          (On SonarCloud, click on your avatar on top-right > My account > Security
#           or go directly to https://sonarcloud.io/account/security/)

# Feel free to take a look at our documentation (https://docs.sonarcloud.io/getting-started/github/)
# or reach out to our community forum if you need some help (https://community.sonarsource.com/c/help/sc/9)

name: SonarCloud manual analysis

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  pull-requests: read # allows SonarCloud to decorate PRs with analysis results

jobs:
  Analysis:
    runs-on: ubuntu-latest
    env:
      TEST_PROJECT_FILE: test/UnitTests/UnitTests.csproj
      TEST_PROJECT_COVERLET_SETTINGS: test/UnitTests/coverlet.runsettings

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Restore SigningKey
        run: echo "${{ secrets.STRONG_NAME_KEY_B64 }}" | base64 -d > DhKey.snk

      - name: Install SonarScanner
        run: dotnet tool install --global dotnet-sonarscanner

      - name: Restore NuGet Packages
        run: dotnet restore

      - name: Get Project version
        id: project_version
        uses: kzrnm/get-net-sdk-project-versions-action@v2
        with:
          proj-path: src/KickStartWeb/KickStartWeb.csproj

      - name: Display Project version
        run: echo "Project version is ${{ steps.project_version.outputs.assembly-version }}"

      - name: Save Project version to github output
        id: gh_project_version
        run: echo "VERSION=${{ steps.project_version.outputs.assembly-version }}" >> $GITHUB_OUTPUT # This allows later steps in the workflow to reference this value as ${{ steps.gh_project_version.outputs.VERSION }}

      - name: Display github project version
        run: echo "Github project version is ${{ steps.gh_project_version.outputs.VERSION }}"

      - name: SonarScanner Begin
        run: dotnet sonarscanner begin \
          /d:sonar.token="${{ secrets.SONAR_TOKEN }}" \
          /k:"armaita_kickstartapp" \
          /d:sonar.host.url="https://sonarcloud.io" \
          /o:"armaita" \
          /d:sonar.qualitygate.wait=false \
          /d:sonar.sources=src \
          /d:sonar.tests=test \
          /d:sonar.exclusions=**/*.xml \
          /d:sonar.cpd.exclusions="**/SitesController.cs,**/Error.cshtml" \
          /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml" \
          /d:sonar.cs.vstest.reportsPaths="**/tests_results.trx" \
          /d:sonar.verbose=true \
          /d:sonar.branch.name=${{ github.ref_name }} \
          /v:"${{ steps.project_version.outputs.assembly-version }}"

      - name: Build solution
        run: dotnet build --configuration Debug --no-incremental

      - name: Run Unit Tests
        working-directory: ${{ github.workspace }}
        run: dotnet test $TEST_PROJECT_FILE --no-build --logger "trx;logFileName=tests_results.trx" --logger:"junit;LogFilePath=junit-test-result.xml;MethodFormat=Class;FailureBodyFormat=Verbose" -l "console;verbosity=detailed" --settings $TEST_PROJECT_COVERLET_SETTINGS

      - name: SonarScanner End
        run: dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

      - name: Clean up Signing Key
        if: always()
        run: rm -f DhKey.snk

      - name: Install ReportGenerator
        run: dotnet tool install -g dotnet-reportgenerator-globaltool

      - name: Generate Coverage Report as HTML
        run: reportgenerator -reports:**/coverage.opencover.xml -targetdir:CoverageReport -reporttypes:Html
