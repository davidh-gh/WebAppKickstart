# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow helps you trigger a SonarCloud analysis of your code and populates
# GitHub Code Scanning alerts with the vulnerabilities found.
# Free for open source project.

# 1. Login to SonarCloud.io using your GitHub account

# 2. Import your project on SonarCloud
#     * Add your GitHub organization first, then add your repository as a new project.
#     * Please note that many languages are eligible for automatic analysis,
#       which means that the analysis will start automatically without the need to set up GitHub Actions.
#     * This behavior can be changed in Administration > Analysis Method.
#
# 3. Follow the SonarCloud in-product tutorial
#     * a. Copy/paste the Project Key and the Organization Key into the args parameter below
#          (You'll find this information in SonarCloud. Click on "Information" at the bottom left)
#
#     * b. Generate a new token and add it to your Github repository's secrets using the name SONAR_TOKEN
#          (On SonarCloud, click on your avatar on top-right > My account > Security
#           or go directly to https://sonarcloud.io/account/security/)

# Feel free to take a look at our documentation (https://docs.sonarcloud.io/getting-started/github/)
# or reach out to our community forum if you need some help (https://community.sonarsource.com/c/help/sc/9)

name: SonarCloud manual analysis

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  pull-requests: read # allows SonarCloud to decorate PRs with analysis results

jobs:
  Analysis:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Install SonarScanner
        run: dotnet tool install --global dotnet-sonarscanner

      - name: List .NET SDKs
        run: dotnet --list-sdks

      - name: List .NET Runtimes
        run: dotnet --list-runtimes

      - name: Restore NuGet Packages
        run: dotnet restore net9/KickstartApp/KickstartApp.sln

      - name: Extract Assembly Version
        id: get_version
        run: |
          ls -la
          sudo apt install radare2
          dotnet msbuild net9/KickstartApp/KickstartApp.sln
          strings net9/KickstartApp/KickstartMvc/bin/Debug/net9.0/KickstartMvc.dll | grep -i "AssemblyVersion"
          cat net9/KickstartApp/KickstartMvc/bin/Debug/net9.0/KickstartMvc.deps.json | grep "version"
          dotnet msbuild net9/KickstartApp/KickstartMvc/KickstartMvc.csproj -nologo -t:GetAssemblyVersion
          VERSION=$(dotnet msbuild net9/KickstartApp/KickstartApp.sln -nologo -t:GetAssemblyVersion -p:TargetFramework=net9.0 -p:Configuration=Release -p:OutputPath=./output | grep 'AssemblyVersion' | sed 's/.*AssemblyVersion=//')
          echo "VERSION=$VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: SonarScanner Begin
        run: dotnet sonarscanner begin /k:"armaita_kickstartapp" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /o:"armaita" /v:"${{ steps.get_version.outputs.VERSION }}"

      - name: Build Solution
        run: dotnet build net9/KickstartApp/KickstartApp.sln

      - name: SonarScanner End
        run: dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
